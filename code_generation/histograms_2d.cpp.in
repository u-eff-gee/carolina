#include <iostream>

using std::cout;
using std::endl;

#include <string>

using std::string;
using std::to_string;

#include "TChain.h"
#include "TFile.h"
#include "TH1.h"
#include "TH2.h"
#include "TTree.h"

#include "command_line_parser.hpp"
#include "detector_setup.hpp"
#include "progress_printer.hpp"

int main(int argc, char* argv[]){

    CommandLineParser command_line_parser;
    command_line_parser(argc, argv);
    po::variables_map vm = command_line_parser.get_variables_map();

    TChain *tree = new TChain("clover_array");
    vector<string> input_files = vm["input_file"].as<vector<string>>();
    for(auto input_file: input_files){
        cout << "Adding '" << input_file.c_str() << "' to TChain." << endl;
        tree->Add(input_file.c_str());
    }

    const int first = vm["first"].as<int>();
    const int last = vm["last"].as<int>() == 0 ? tree->GetEntries() : vm["last"].as<int>();

    if(first > last){
        cout << "Error: first entry (" << first << ") is larger or equal to last entry (" << last << "). Aborting ..." << endl;
	    return 0;
    }

    ProgressPrinter progress_printer(last-first+1, 0.001);

    @REGISTER_BRANCHES@

    @CREATE_HISTOGRAMS@

    for(int i = first; i <= last; ++i){
        progress_printer(i - first);

        tree->GetEntry(i);

        @TREE_LOOP@
    }

    TFile output_file(vm["output_file"].as<string>().c_str(), "RECREATE");

    @WRITE_HISTOGRAMS@

    output_file.Close();
    cout << "Created output file '" << vm["output_file"].as<string>() << "'." << endl;
}
